// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    HR
    DEPARTMENT_HEAD
    MANAGER
    MEMBER
}

enum LeaveStatus {
    PENDING
    APPROVED
    REJECTED
}

// enum LeaveTypeSelectd {
//     EMERGENCY
//     SICK
//     VACATION
//     MATERNITY
//     PATERNITY
//     BEREAVEMENT
//     MARRIAGE
//     OTHER
// }

model User {
    id            Int            @id @default(autoincrement())
    name          String
    email         String         @unique
    image         String?
    password      String
    role          Role           @default(MEMBER)
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @default(now())
    leaves        Leave[]
    articles      Article[]
    announcements Announcement[]
}

model Leave {
    id                   Int         @id @default(autoincrement())
    userId               Int
    startLeaveDate       String    
    endLeaveDate         String    
    totalLeaveDays       Int
    typeLeave            String
    reason               String
    rejectionReason      String?
    status               LeaveStatus @default(PENDING)
    managerStatus        LeaveStatus @default(PENDING)
    departmentHeadStatus LeaveStatus @default(PENDING)
    hrStatus             LeaveStatus @default(PENDING)
    createdAt            DateTime    @default(now())
    updatedAt            DateTime    @default(now())
    user                 User        @relation(fields: [userId], references: [id])

    @@unique([userId, startLeaveDate, endLeaveDate, typeLeave])
}

model Announcement {
    id        Int      @id @default(autoincrement())
    title     String
    slug      String   @unique
    excerpt   String
    content   String
    userId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
}

model Article {
    id        Int      @id @default(autoincrement())
    title     String
    slug      String   @unique
    excerpt   String
    content   String
    image     String
    userId    Int
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
}

model HolidayDate {
    holidayId          Int      @id @default(autoincrement())
    holidayDate         String
    holidayName        String
    holidayType        String
    createdAt          DateTime @default(now())
    updatedAt          DateTime @default(now())
}

model LeaveApproveEvent {
    leaveApproveEventId Int         @id @default(autoincrement())
    leaveId             Int
    userApproveId       Int
    statusApprove       LeaveStatus @default(APPROVED)
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @default(now())
}

model LeaveRejectEvent {
    leaveRejectEventId Int         @id @default(autoincrement())
    leaveId            Int
    userId             Int
    reasonReject       String
    status             LeaveStatus @default(REJECTED)
    createdAt          DateTime    @default(now())
    updatedAt          DateTime    @default(now())
}

model LeaveType {
    leaveTypeId          Int      @id @default(autoincrement())
    leaveTypeDescription String
    maxAllowPerYear      Int
    createdAt            DateTime @default(now())
    updatedAt            DateTime @default(now())
}
